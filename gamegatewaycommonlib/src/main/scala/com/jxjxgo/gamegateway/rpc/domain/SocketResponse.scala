/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.gamegateway.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object SocketResponse extends ThriftStructCodec3[SocketResponse] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("SocketResponse")
  val P1Field = new TField("p1", TType.STRING, 1)
  val P1FieldManifest = implicitly[Manifest[String]]
  val P2Field = new TField("p2", TType.STRING, 2)
  val P2FieldManifest = implicitly[Manifest[String]]
  val P3Field = new TField("p3", TType.STRING, 3)
  val P3FieldManifest = implicitly[Manifest[String]]
  val P4Field = new TField("p4", TType.STRING, 4)
  val P4FieldManifest = implicitly[Manifest[String]]
  val P5Field = new TField("p5", TType.STRING, 5)
  val P5FieldManifest = implicitly[Manifest[String]]
  val P6Field = new TField("p6", TType.STRING, 6)
  val P6FieldManifest = implicitly[Manifest[String]]
  val P7Field = new TField("p7", TType.STRING, 7)
  val P7FieldManifest = implicitly[Manifest[String]]
  val P8Field = new TField("p8", TType.STRING, 8)
  val P8FieldManifest = implicitly[Manifest[String]]
  val P9Field = new TField("p9", TType.STRING, 9)
  val P9FieldManifest = implicitly[Manifest[String]]
  val P10Field = new TField("p10", TType.STRING, 10)
  val P10FieldManifest = implicitly[Manifest[String]]
  val P11Field = new TField("p11", TType.STRING, 11)
  val P11FieldManifest = implicitly[Manifest[String]]
  val P12Field = new TField("p12", TType.STRING, 12)
  val P12FieldManifest = implicitly[Manifest[String]]
  val P13Field = new TField("p13", TType.STRING, 13)
  val P13FieldManifest = implicitly[Manifest[String]]
  val P14Field = new TField("p14", TType.STRING, 14)
  val P14FieldManifest = implicitly[Manifest[String]]
  val P15Field = new TField("p15", TType.STRING, 15)
  val P15FieldManifest = implicitly[Manifest[String]]
  val P16Field = new TField("p16", TType.STRING, 16)
  val P16FieldManifest = implicitly[Manifest[String]]
  val P17Field = new TField("p17", TType.STRING, 17)
  val P17FieldManifest = implicitly[Manifest[String]]
  val P18Field = new TField("p18", TType.STRING, 18)
  val P18FieldManifest = implicitly[Manifest[String]]
  val P19Field = new TField("p19", TType.STRING, 19)
  val P19FieldManifest = implicitly[Manifest[String]]
  val P20Field = new TField("p20", TType.STRING, 20)
  val P20FieldManifest = implicitly[Manifest[String]]
  val P21Field = new TField("p21", TType.STRING, 21)
  val P21FieldManifest = implicitly[Manifest[String]]
  val P22Field = new TField("p22", TType.STRING, 22)
  val P22FieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      P1Field,
      false,
      false,
      P1FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P2Field,
      false,
      false,
      P2FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P3Field,
      false,
      false,
      P3FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P4Field,
      false,
      false,
      P4FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P5Field,
      false,
      false,
      P5FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P6Field,
      false,
      false,
      P6FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P7Field,
      false,
      false,
      P7FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P8Field,
      false,
      false,
      P8FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P9Field,
      false,
      false,
      P9FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P10Field,
      false,
      false,
      P10FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P11Field,
      false,
      false,
      P11FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P12Field,
      false,
      false,
      P12FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P13Field,
      false,
      false,
      P13FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P14Field,
      false,
      false,
      P14FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P15Field,
      false,
      false,
      P15FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P16Field,
      false,
      false,
      P16FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P17Field,
      false,
      false,
      P17FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P18Field,
      false,
      false,
      P18FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P19Field,
      false,
      false,
      P19FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P20Field,
      false,
      false,
      P20FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P21Field,
      false,
      false,
      P21FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      P22Field,
      false,
      false,
      P22FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: SocketResponse): Unit = {
  }

  def withoutPassthroughFields(original: SocketResponse): SocketResponse =
    new Immutable(
      p1 =
        {
          val field = original.p1
          field
        },
      p2 =
        {
          val field = original.p2
          field
        },
      p3 =
        {
          val field = original.p3
          field
        },
      p4 =
        {
          val field = original.p4
          field
        },
      p5 =
        {
          val field = original.p5
          field
        },
      p6 =
        {
          val field = original.p6
          field
        },
      p7 =
        {
          val field = original.p7
          field
        },
      p8 =
        {
          val field = original.p8
          field
        },
      p9 =
        {
          val field = original.p9
          field
        },
      p10 =
        {
          val field = original.p10
          field
        },
      p11 =
        {
          val field = original.p11
          field
        },
      p12 =
        {
          val field = original.p12
          field
        },
      p13 =
        {
          val field = original.p13
          field
        },
      p14 =
        {
          val field = original.p14
          field
        },
      p15 =
        {
          val field = original.p15
          field
        },
      p16 =
        {
          val field = original.p16
          field
        },
      p17 =
        {
          val field = original.p17
          field
        },
      p18 =
        {
          val field = original.p18
          field
        },
      p19 =
        {
          val field = original.p19
          field
        },
      p20 =
        {
          val field = original.p20
          field
        },
      p21 =
        {
          val field = original.p21
          field
        },
      p22 =
        {
          val field = original.p22
          field
        }
    )

  override def encode(_item: SocketResponse, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): SocketResponse = {

    var p1Offset: Int = -1
    var p2Offset: Int = -1
    var p3Offset: Int = -1
    var p4Offset: Int = -1
    var p5Offset: Int = -1
    var p6Offset: Int = -1
    var p7Offset: Int = -1
    var p8Offset: Int = -1
    var p9Offset: Int = -1
    var p10Offset: Int = -1
    var p11Offset: Int = -1
    var p12Offset: Int = -1
    var p13Offset: Int = -1
    var p14Offset: Int = -1
    var p15Offset: Int = -1
    var p16Offset: Int = -1
    var p17Offset: Int = -1
    var p18Offset: Int = -1
    var p19Offset: Int = -1
    var p20Offset: Int = -1
    var p21Offset: Int = -1
    var p22Offset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                p1Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p1' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                p2Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                p3Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p3' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                p4Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p4' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                p5Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p5' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                p6Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p6' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                p7Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p7' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.STRING =>
                p8Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p8' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.STRING =>
                p9Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p9' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRING =>
                p10Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p10' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.STRING =>
                p11Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p11' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.STRING =>
                p12Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p12' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.STRING =>
                p13Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p13' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 14 =>
            _field.`type` match {
              case TType.STRING =>
                p14Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p14' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 15 =>
            _field.`type` match {
              case TType.STRING =>
                p15Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p15' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 16 =>
            _field.`type` match {
              case TType.STRING =>
                p16Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p16' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 17 =>
            _field.`type` match {
              case TType.STRING =>
                p17Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p17' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 18 =>
            _field.`type` match {
              case TType.STRING =>
                p18Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p18' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 19 =>
            _field.`type` match {
              case TType.STRING =>
                p19Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p19' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 20 =>
            _field.`type` match {
              case TType.STRING =>
                p20Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p20' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 21 =>
            _field.`type` match {
              case TType.STRING =>
                p21Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p21' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 22 =>
            _field.`type` match {
              case TType.STRING =>
                p22Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p22' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      p1Offset,
      p2Offset,
      p3Offset,
      p4Offset,
      p5Offset,
      p6Offset,
      p7Offset,
      p8Offset,
      p9Offset,
      p10Offset,
      p11Offset,
      p12Offset,
      p13Offset,
      p14Offset,
      p15Offset,
      p16Offset,
      p17Offset,
      p18Offset,
      p19Offset,
      p20Offset,
      p21Offset,
      p22Offset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): SocketResponse =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): SocketResponse = {
    var p1: String = ""
    var p2: String = ""
    var p3: String = ""
    var p4: String = ""
    var p5: String = ""
    var p6: String = ""
    var p7: String = ""
    var p8: String = ""
    var p9: String = ""
    var p10: String = ""
    var p11: String = ""
    var p12: String = ""
    var p13: String = ""
    var p14: String = ""
    var p15: String = ""
    var p16: String = ""
    var p17: String = ""
    var p18: String = ""
    var p19: String = ""
    var p20: String = ""
    var p21: String = ""
    var p22: String = ""
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                p1 = readP1Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p1' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                p2 = readP2Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                p3 = readP3Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p3' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                p4 = readP4Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p4' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                p5 = readP5Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p5' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                p6 = readP6Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p6' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                p7 = readP7Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p7' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.STRING =>
                p8 = readP8Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p8' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.STRING =>
                p9 = readP9Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p9' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRING =>
                p10 = readP10Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p10' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.STRING =>
                p11 = readP11Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p11' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.STRING =>
                p12 = readP12Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p12' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.STRING =>
                p13 = readP13Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p13' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 14 =>
            _field.`type` match {
              case TType.STRING =>
                p14 = readP14Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p14' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 15 =>
            _field.`type` match {
              case TType.STRING =>
                p15 = readP15Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p15' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 16 =>
            _field.`type` match {
              case TType.STRING =>
                p16 = readP16Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p16' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 17 =>
            _field.`type` match {
              case TType.STRING =>
                p17 = readP17Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p17' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 18 =>
            _field.`type` match {
              case TType.STRING =>
                p18 = readP18Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p18' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 19 =>
            _field.`type` match {
              case TType.STRING =>
                p19 = readP19Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p19' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 20 =>
            _field.`type` match {
              case TType.STRING =>
                p20 = readP20Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p20' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 21 =>
            _field.`type` match {
              case TType.STRING =>
                p21 = readP21Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p21' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 22 =>
            _field.`type` match {
              case TType.STRING =>
                p22 = readP22Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'p22' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      p1,
      p2,
      p3,
      p4,
      p5,
      p6,
      p7,
      p8,
      p9,
      p10,
      p11,
      p12,
      p13,
      p14,
      p15,
      p16,
      p17,
      p18,
      p19,
      p20,
      p21,
      p22,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    p1: String = "",
    p2: String = "",
    p3: String = "",
    p4: String = "",
    p5: String = "",
    p6: String = "",
    p7: String = "",
    p8: String = "",
    p9: String = "",
    p10: String = "",
    p11: String = "",
    p12: String = "",
    p13: String = "",
    p14: String = "",
    p15: String = "",
    p16: String = "",
    p17: String = "",
    p18: String = "",
    p19: String = "",
    p20: String = "",
    p21: String = "",
    p22: String = ""
  ): SocketResponse =
    new Immutable(
      p1,
      p2,
      p3,
      p4,
      p5,
      p6,
      p7,
      p8,
      p9,
      p10,
      p11,
      p12,
      p13,
      p14,
      p15,
      p16,
      p17,
      p18,
      p19,
      p20,
      p21,
      p22
    )

  def unapply(_item: SocketResponse): _root_.scala.Option[scala.Product22[String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String]] = _root_.scala.Some(_item)


  @inline private def readP1Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP1Field(p1_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P1Field)
    writeP1Value(p1_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP1Value(p1_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p1_item)
  }

  @inline private def readP2Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP2Field(p2_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P2Field)
    writeP2Value(p2_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP2Value(p2_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p2_item)
  }

  @inline private def readP3Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP3Field(p3_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P3Field)
    writeP3Value(p3_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP3Value(p3_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p3_item)
  }

  @inline private def readP4Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP4Field(p4_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P4Field)
    writeP4Value(p4_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP4Value(p4_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p4_item)
  }

  @inline private def readP5Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP5Field(p5_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P5Field)
    writeP5Value(p5_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP5Value(p5_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p5_item)
  }

  @inline private def readP6Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP6Field(p6_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P6Field)
    writeP6Value(p6_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP6Value(p6_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p6_item)
  }

  @inline private def readP7Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP7Field(p7_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P7Field)
    writeP7Value(p7_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP7Value(p7_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p7_item)
  }

  @inline private def readP8Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP8Field(p8_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P8Field)
    writeP8Value(p8_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP8Value(p8_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p8_item)
  }

  @inline private def readP9Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP9Field(p9_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P9Field)
    writeP9Value(p9_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP9Value(p9_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p9_item)
  }

  @inline private def readP10Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP10Field(p10_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P10Field)
    writeP10Value(p10_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP10Value(p10_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p10_item)
  }

  @inline private def readP11Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP11Field(p11_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P11Field)
    writeP11Value(p11_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP11Value(p11_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p11_item)
  }

  @inline private def readP12Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP12Field(p12_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P12Field)
    writeP12Value(p12_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP12Value(p12_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p12_item)
  }

  @inline private def readP13Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP13Field(p13_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P13Field)
    writeP13Value(p13_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP13Value(p13_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p13_item)
  }

  @inline private def readP14Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP14Field(p14_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P14Field)
    writeP14Value(p14_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP14Value(p14_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p14_item)
  }

  @inline private def readP15Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP15Field(p15_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P15Field)
    writeP15Value(p15_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP15Value(p15_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p15_item)
  }

  @inline private def readP16Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP16Field(p16_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P16Field)
    writeP16Value(p16_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP16Value(p16_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p16_item)
  }

  @inline private def readP17Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP17Field(p17_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P17Field)
    writeP17Value(p17_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP17Value(p17_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p17_item)
  }

  @inline private def readP18Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP18Field(p18_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P18Field)
    writeP18Value(p18_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP18Value(p18_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p18_item)
  }

  @inline private def readP19Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP19Field(p19_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P19Field)
    writeP19Value(p19_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP19Value(p19_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p19_item)
  }

  @inline private def readP20Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP20Field(p20_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P20Field)
    writeP20Value(p20_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP20Value(p20_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p20_item)
  }

  @inline private def readP21Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP21Field(p21_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P21Field)
    writeP21Value(p21_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP21Value(p21_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p21_item)
  }

  @inline private def readP22Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeP22Field(p22_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(P22Field)
    writeP22Value(p22_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeP22Value(p22_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(p22_item)
  }


  object Immutable extends ThriftStructCodec3[SocketResponse] {
    override def encode(_item: SocketResponse, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): SocketResponse = SocketResponse.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[SocketResponse] = SocketResponse.metaData
  }

  /**
   * The default read-only implementation of SocketResponse.  You typically should not need to
   * directly reference this class; instead, use the SocketResponse.apply method to construct
   * new instances.
   */
  class Immutable(
      val p1: String,
      val p2: String,
      val p3: String,
      val p4: String,
      val p5: String,
      val p6: String,
      val p7: String,
      val p8: String,
      val p9: String,
      val p10: String,
      val p11: String,
      val p12: String,
      val p13: String,
      val p14: String,
      val p15: String,
      val p16: String,
      val p17: String,
      val p18: String,
      val p19: String,
      val p20: String,
      val p21: String,
      val p22: String,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SocketResponse {
    def this(
      p1: String = "",
      p2: String = "",
      p3: String = "",
      p4: String = "",
      p5: String = "",
      p6: String = "",
      p7: String = "",
      p8: String = "",
      p9: String = "",
      p10: String = "",
      p11: String = "",
      p12: String = "",
      p13: String = "",
      p14: String = "",
      p15: String = "",
      p16: String = "",
      p17: String = "",
      p18: String = "",
      p19: String = "",
      p20: String = "",
      p21: String = "",
      p22: String = ""
    ) = this(
      p1,
      p2,
      p3,
      p4,
      p5,
      p6,
      p7,
      p8,
      p9,
      p10,
      p11,
      p12,
      p13,
      p14,
      p15,
      p16,
      p17,
      p18,
      p19,
      p20,
      p21,
      p22,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      p1Offset: Int,
      p2Offset: Int,
      p3Offset: Int,
      p4Offset: Int,
      p5Offset: Int,
      p6Offset: Int,
      p7Offset: Int,
      p8Offset: Int,
      p9Offset: Int,
      p10Offset: Int,
      p11Offset: Int,
      p12Offset: Int,
      p13Offset: Int,
      p14Offset: Int,
      p15Offset: Int,
      p16Offset: Int,
      p17Offset: Int,
      p18Offset: Int,
      p19Offset: Int,
      p20Offset: Int,
      p21Offset: Int,
      p22Offset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SocketResponse {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val p1: String =
      if (p1Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p1Offset)
      }
    lazy val p2: String =
      if (p2Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p2Offset)
      }
    lazy val p3: String =
      if (p3Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p3Offset)
      }
    lazy val p4: String =
      if (p4Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p4Offset)
      }
    lazy val p5: String =
      if (p5Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p5Offset)
      }
    lazy val p6: String =
      if (p6Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p6Offset)
      }
    lazy val p7: String =
      if (p7Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p7Offset)
      }
    lazy val p8: String =
      if (p8Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p8Offset)
      }
    lazy val p9: String =
      if (p9Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p9Offset)
      }
    lazy val p10: String =
      if (p10Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p10Offset)
      }
    lazy val p11: String =
      if (p11Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p11Offset)
      }
    lazy val p12: String =
      if (p12Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p12Offset)
      }
    lazy val p13: String =
      if (p13Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p13Offset)
      }
    lazy val p14: String =
      if (p14Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p14Offset)
      }
    lazy val p15: String =
      if (p15Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p15Offset)
      }
    lazy val p16: String =
      if (p16Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p16Offset)
      }
    lazy val p17: String =
      if (p17Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p17Offset)
      }
    lazy val p18: String =
      if (p18Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p18Offset)
      }
    lazy val p19: String =
      if (p19Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p19Offset)
      }
    lazy val p20: String =
      if (p20Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p20Offset)
      }
    lazy val p21: String =
      if (p21Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p21Offset)
      }
    lazy val p22: String =
      if (p22Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, p22Offset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the SocketResponse trait with additional state or
   * behavior and implement the read-only methods from SocketResponse using an underlying
   * instance.
   */
  trait Proxy extends SocketResponse {
    protected def _underlying_SocketResponse: SocketResponse
    override def p1: String = _underlying_SocketResponse.p1
    override def p2: String = _underlying_SocketResponse.p2
    override def p3: String = _underlying_SocketResponse.p3
    override def p4: String = _underlying_SocketResponse.p4
    override def p5: String = _underlying_SocketResponse.p5
    override def p6: String = _underlying_SocketResponse.p6
    override def p7: String = _underlying_SocketResponse.p7
    override def p8: String = _underlying_SocketResponse.p8
    override def p9: String = _underlying_SocketResponse.p9
    override def p10: String = _underlying_SocketResponse.p10
    override def p11: String = _underlying_SocketResponse.p11
    override def p12: String = _underlying_SocketResponse.p12
    override def p13: String = _underlying_SocketResponse.p13
    override def p14: String = _underlying_SocketResponse.p14
    override def p15: String = _underlying_SocketResponse.p15
    override def p16: String = _underlying_SocketResponse.p16
    override def p17: String = _underlying_SocketResponse.p17
    override def p18: String = _underlying_SocketResponse.p18
    override def p19: String = _underlying_SocketResponse.p19
    override def p20: String = _underlying_SocketResponse.p20
    override def p21: String = _underlying_SocketResponse.p21
    override def p22: String = _underlying_SocketResponse.p22
    override def _passthroughFields = _underlying_SocketResponse._passthroughFields
  }
}

trait SocketResponse
  extends ThriftStruct
  with scala.Product22[String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String]
  with java.io.Serializable
{
  import SocketResponse._

  def p1: String
  def p2: String
  def p3: String
  def p4: String
  def p5: String
  def p6: String
  def p7: String
  def p8: String
  def p9: String
  def p10: String
  def p11: String
  def p12: String
  def p13: String
  def p14: String
  def p15: String
  def p16: String
  def p17: String
  def p18: String
  def p19: String
  def p20: String
  def p21: String
  def p22: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = p1
  def _2 = p2
  def _3 = p3
  def _4 = p4
  def _5 = p5
  def _6 = p6
  def _7 = p7
  def _8 = p8
  def _9 = p9
  def _10 = p10
  def _11 = p11
  def _12 = p12
  def _13 = p13
  def _14 = p14
  def _15 = p15
  def _16 = p16
  def _17 = p17
  def _18 = p18
  def _19 = p19
  def _20 = p20
  def _21 = p21
  def _22 = p22


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (p1 ne null) {
                writeP1Value(p1, _oprot)
                _root_.scala.Some(SocketResponse.P1Field)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (p2 ne null) {
                writeP2Value(p2, _oprot)
                _root_.scala.Some(SocketResponse.P2Field)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (p3 ne null) {
                writeP3Value(p3, _oprot)
                _root_.scala.Some(SocketResponse.P3Field)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (p4 ne null) {
                writeP4Value(p4, _oprot)
                _root_.scala.Some(SocketResponse.P4Field)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (p5 ne null) {
                writeP5Value(p5, _oprot)
                _root_.scala.Some(SocketResponse.P5Field)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (p6 ne null) {
                writeP6Value(p6, _oprot)
                _root_.scala.Some(SocketResponse.P6Field)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (p7 ne null) {
                writeP7Value(p7, _oprot)
                _root_.scala.Some(SocketResponse.P7Field)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (p8 ne null) {
                writeP8Value(p8, _oprot)
                _root_.scala.Some(SocketResponse.P8Field)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (p9 ne null) {
                writeP9Value(p9, _oprot)
                _root_.scala.Some(SocketResponse.P9Field)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (p10 ne null) {
                writeP10Value(p10, _oprot)
                _root_.scala.Some(SocketResponse.P10Field)
              } else {
                _root_.scala.None
              }
            case 11 =>
              if (p11 ne null) {
                writeP11Value(p11, _oprot)
                _root_.scala.Some(SocketResponse.P11Field)
              } else {
                _root_.scala.None
              }
            case 12 =>
              if (p12 ne null) {
                writeP12Value(p12, _oprot)
                _root_.scala.Some(SocketResponse.P12Field)
              } else {
                _root_.scala.None
              }
            case 13 =>
              if (p13 ne null) {
                writeP13Value(p13, _oprot)
                _root_.scala.Some(SocketResponse.P13Field)
              } else {
                _root_.scala.None
              }
            case 14 =>
              if (p14 ne null) {
                writeP14Value(p14, _oprot)
                _root_.scala.Some(SocketResponse.P14Field)
              } else {
                _root_.scala.None
              }
            case 15 =>
              if (p15 ne null) {
                writeP15Value(p15, _oprot)
                _root_.scala.Some(SocketResponse.P15Field)
              } else {
                _root_.scala.None
              }
            case 16 =>
              if (p16 ne null) {
                writeP16Value(p16, _oprot)
                _root_.scala.Some(SocketResponse.P16Field)
              } else {
                _root_.scala.None
              }
            case 17 =>
              if (p17 ne null) {
                writeP17Value(p17, _oprot)
                _root_.scala.Some(SocketResponse.P17Field)
              } else {
                _root_.scala.None
              }
            case 18 =>
              if (p18 ne null) {
                writeP18Value(p18, _oprot)
                _root_.scala.Some(SocketResponse.P18Field)
              } else {
                _root_.scala.None
              }
            case 19 =>
              if (p19 ne null) {
                writeP19Value(p19, _oprot)
                _root_.scala.Some(SocketResponse.P19Field)
              } else {
                _root_.scala.None
              }
            case 20 =>
              if (p20 ne null) {
                writeP20Value(p20, _oprot)
                _root_.scala.Some(SocketResponse.P20Field)
              } else {
                _root_.scala.None
              }
            case 21 =>
              if (p21 ne null) {
                writeP21Value(p21, _oprot)
                _root_.scala.Some(SocketResponse.P21Field)
              } else {
                _root_.scala.None
              }
            case 22 =>
              if (p22 ne null) {
                writeP22Value(p22, _oprot)
                _root_.scala.Some(SocketResponse.P22Field)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): SocketResponse = {
    var p1: String = this.p1
    var p2: String = this.p2
    var p3: String = this.p3
    var p4: String = this.p4
    var p5: String = this.p5
    var p6: String = this.p6
    var p7: String = this.p7
    var p8: String = this.p8
    var p9: String = this.p9
    var p10: String = this.p10
    var p11: String = this.p11
    var p12: String = this.p12
    var p13: String = this.p13
    var p14: String = this.p14
    var p15: String = this.p15
    var p16: String = this.p16
    var p17: String = this.p17
    var p18: String = this.p18
    var p19: String = this.p19
    var p20: String = this.p20
    var p21: String = this.p21
    var p22: String = this.p22
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        p1 = readP1Value(_blob.read)
      case 2 =>
        p2 = readP2Value(_blob.read)
      case 3 =>
        p3 = readP3Value(_blob.read)
      case 4 =>
        p4 = readP4Value(_blob.read)
      case 5 =>
        p5 = readP5Value(_blob.read)
      case 6 =>
        p6 = readP6Value(_blob.read)
      case 7 =>
        p7 = readP7Value(_blob.read)
      case 8 =>
        p8 = readP8Value(_blob.read)
      case 9 =>
        p9 = readP9Value(_blob.read)
      case 10 =>
        p10 = readP10Value(_blob.read)
      case 11 =>
        p11 = readP11Value(_blob.read)
      case 12 =>
        p12 = readP12Value(_blob.read)
      case 13 =>
        p13 = readP13Value(_blob.read)
      case 14 =>
        p14 = readP14Value(_blob.read)
      case 15 =>
        p15 = readP15Value(_blob.read)
      case 16 =>
        p16 = readP16Value(_blob.read)
      case 17 =>
        p17 = readP17Value(_blob.read)
      case 18 =>
        p18 = readP18Value(_blob.read)
      case 19 =>
        p19 = readP19Value(_blob.read)
      case 20 =>
        p20 = readP20Value(_blob.read)
      case 21 =>
        p21 = readP21Value(_blob.read)
      case 22 =>
        p22 = readP22Value(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      p1,
      p2,
      p3,
      p4,
      p5,
      p6,
      p7,
      p8,
      p9,
      p10,
      p11,
      p12,
      p13,
      p14,
      p15,
      p16,
      p17,
      p18,
      p19,
      p20,
      p21,
      p22,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): SocketResponse = {
    var p1: String = this.p1
    var p2: String = this.p2
    var p3: String = this.p3
    var p4: String = this.p4
    var p5: String = this.p5
    var p6: String = this.p6
    var p7: String = this.p7
    var p8: String = this.p8
    var p9: String = this.p9
    var p10: String = this.p10
    var p11: String = this.p11
    var p12: String = this.p12
    var p13: String = this.p13
    var p14: String = this.p14
    var p15: String = this.p15
    var p16: String = this.p16
    var p17: String = this.p17
    var p18: String = this.p18
    var p19: String = this.p19
    var p20: String = this.p20
    var p21: String = this.p21
    var p22: String = this.p22

    _fieldId match {
      case 1 =>
        p1 = ""
      case 2 =>
        p2 = ""
      case 3 =>
        p3 = ""
      case 4 =>
        p4 = ""
      case 5 =>
        p5 = ""
      case 6 =>
        p6 = ""
      case 7 =>
        p7 = ""
      case 8 =>
        p8 = ""
      case 9 =>
        p9 = ""
      case 10 =>
        p10 = ""
      case 11 =>
        p11 = ""
      case 12 =>
        p12 = ""
      case 13 =>
        p13 = ""
      case 14 =>
        p14 = ""
      case 15 =>
        p15 = ""
      case 16 =>
        p16 = ""
      case 17 =>
        p17 = ""
      case 18 =>
        p18 = ""
      case 19 =>
        p19 = ""
      case 20 =>
        p20 = ""
      case 21 =>
        p21 = ""
      case 22 =>
        p22 = ""
      case _ =>
    }
    new Immutable(
      p1,
      p2,
      p3,
      p4,
      p5,
      p6,
      p7,
      p8,
      p9,
      p10,
      p11,
      p12,
      p13,
      p14,
      p15,
      p16,
      p17,
      p18,
      p19,
      p20,
      p21,
      p22,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetP1: SocketResponse = unsetField(1)

  def unsetP2: SocketResponse = unsetField(2)

  def unsetP3: SocketResponse = unsetField(3)

  def unsetP4: SocketResponse = unsetField(4)

  def unsetP5: SocketResponse = unsetField(5)

  def unsetP6: SocketResponse = unsetField(6)

  def unsetP7: SocketResponse = unsetField(7)

  def unsetP8: SocketResponse = unsetField(8)

  def unsetP9: SocketResponse = unsetField(9)

  def unsetP10: SocketResponse = unsetField(10)

  def unsetP11: SocketResponse = unsetField(11)

  def unsetP12: SocketResponse = unsetField(12)

  def unsetP13: SocketResponse = unsetField(13)

  def unsetP14: SocketResponse = unsetField(14)

  def unsetP15: SocketResponse = unsetField(15)

  def unsetP16: SocketResponse = unsetField(16)

  def unsetP17: SocketResponse = unsetField(17)

  def unsetP18: SocketResponse = unsetField(18)

  def unsetP19: SocketResponse = unsetField(19)

  def unsetP20: SocketResponse = unsetField(20)

  def unsetP21: SocketResponse = unsetField(21)

  def unsetP22: SocketResponse = unsetField(22)


  override def write(_oprot: TProtocol): Unit = {
    SocketResponse.validate(this)
    _oprot.writeStructBegin(Struct)
    if (p1 ne null) writeP1Field(p1, _oprot)
    if (p2 ne null) writeP2Field(p2, _oprot)
    if (p3 ne null) writeP3Field(p3, _oprot)
    if (p4 ne null) writeP4Field(p4, _oprot)
    if (p5 ne null) writeP5Field(p5, _oprot)
    if (p6 ne null) writeP6Field(p6, _oprot)
    if (p7 ne null) writeP7Field(p7, _oprot)
    if (p8 ne null) writeP8Field(p8, _oprot)
    if (p9 ne null) writeP9Field(p9, _oprot)
    if (p10 ne null) writeP10Field(p10, _oprot)
    if (p11 ne null) writeP11Field(p11, _oprot)
    if (p12 ne null) writeP12Field(p12, _oprot)
    if (p13 ne null) writeP13Field(p13, _oprot)
    if (p14 ne null) writeP14Field(p14, _oprot)
    if (p15 ne null) writeP15Field(p15, _oprot)
    if (p16 ne null) writeP16Field(p16, _oprot)
    if (p17 ne null) writeP17Field(p17, _oprot)
    if (p18 ne null) writeP18Field(p18, _oprot)
    if (p19 ne null) writeP19Field(p19, _oprot)
    if (p20 ne null) writeP20Field(p20, _oprot)
    if (p21 ne null) writeP21Field(p21, _oprot)
    if (p22 ne null) writeP22Field(p22, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    p1: String = this.p1,
    p2: String = this.p2,
    p3: String = this.p3,
    p4: String = this.p4,
    p5: String = this.p5,
    p6: String = this.p6,
    p7: String = this.p7,
    p8: String = this.p8,
    p9: String = this.p9,
    p10: String = this.p10,
    p11: String = this.p11,
    p12: String = this.p12,
    p13: String = this.p13,
    p14: String = this.p14,
    p15: String = this.p15,
    p16: String = this.p16,
    p17: String = this.p17,
    p18: String = this.p18,
    p19: String = this.p19,
    p20: String = this.p20,
    p21: String = this.p21,
    p22: String = this.p22,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): SocketResponse =
    new Immutable(
      p1,
      p2,
      p3,
      p4,
      p5,
      p6,
      p7,
      p8,
      p9,
      p10,
      p11,
      p12,
      p13,
      p14,
      p15,
      p16,
      p17,
      p18,
      p19,
      p20,
      p21,
      p22,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[SocketResponse]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[SocketResponse]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 22

  override def productElement(n: Int): Any = n match {
    case 0 => this.p1
    case 1 => this.p2
    case 2 => this.p3
    case 3 => this.p4
    case 4 => this.p5
    case 5 => this.p6
    case 6 => this.p7
    case 7 => this.p8
    case 8 => this.p9
    case 9 => this.p10
    case 10 => this.p11
    case 11 => this.p12
    case 12 => this.p13
    case 13 => this.p14
    case 14 => this.p15
    case 15 => this.p16
    case 16 => this.p17
    case 17 => this.p18
    case 18 => this.p19
    case 19 => this.p20
    case 20 => this.p21
    case 21 => this.p22
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "SocketResponse"
}
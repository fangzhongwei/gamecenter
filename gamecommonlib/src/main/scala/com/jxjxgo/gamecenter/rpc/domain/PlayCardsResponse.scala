/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.gamecenter.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object PlayCardsResponse extends ThriftStructCodec3[PlayCardsResponse] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("PlayCardsResponse")
  val CodeField = new TField("code", TType.STRING, 1)
  val CodeFieldManifest = implicitly[Manifest[String]]
  val IsFinishedField = new TField("isFinished", TType.BOOL, 2)
  val IsFinishedFieldManifest = implicitly[Manifest[Boolean]]
  val MemberId0Field = new TField("memberId0", TType.I64, 3)
  val MemberId0FieldManifest = implicitly[Manifest[Long]]
  val Turn0Field = new TField("turn0", TType.STRUCT, 4)
  val Turn0FieldManifest = implicitly[Manifest[com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse]]
  val MemberId2Field = new TField("memberId2", TType.I64, 5)
  val MemberId2FieldManifest = implicitly[Manifest[Long]]
  val Turn2Field = new TField("turn2", TType.STRUCT, 6)
  val Turn2FieldManifest = implicitly[Manifest[com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      CodeField,
      false,
      false,
      CodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      IsFinishedField,
      false,
      false,
      IsFinishedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MemberId0Field,
      false,
      false,
      MemberId0FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      Turn0Field,
      false,
      false,
      Turn0FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MemberId2Field,
      false,
      false,
      MemberId2FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      Turn2Field,
      false,
      false,
      Turn2FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: PlayCardsResponse): Unit = {
  }

  def withoutPassthroughFields(original: PlayCardsResponse): PlayCardsResponse =
    new Immutable(
      code =
        {
          val field = original.code
          field
        },
      isFinished =
        {
          val field = original.isFinished
          field
        },
      memberId0 =
        {
          val field = original.memberId0
          field
        },
      turn0 =
        {
          val field = original.turn0
          com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse.withoutPassthroughFields(field)
        },
      memberId2 =
        {
          val field = original.memberId2
          field
        },
      turn2 =
        {
          val field = original.turn2
          com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse.withoutPassthroughFields(field)
        }
    )

  override def encode(_item: PlayCardsResponse, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): PlayCardsResponse = {

    var codeOffset: Int = -1
    var isFinished: Boolean = false
    var memberId0: Long = 0L
    var turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = null
    var memberId2: Long = 0L
    var turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = null

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                codeOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.BOOL =>
    
                isFinished = readIsFinishedValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'isFinished' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
    
                memberId0 = readMemberId0Value(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId0' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                turn0 = readTurn0Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'turn0' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I64 =>
    
                memberId2 = readMemberId2Value(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                turn2 = readTurn2Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'turn2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      codeOffset,
      isFinished,
      memberId0,
      turn0,
      memberId2,
      turn2,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): PlayCardsResponse =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): PlayCardsResponse = {
    var code: String = ""
    var isFinished: Boolean = false
    var memberId0: Long = 0L
    var turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = null
    var memberId2: Long = 0L
    var turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                code = readCodeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.BOOL =>
                isFinished = readIsFinishedValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'isFinished' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                memberId0 = readMemberId0Value(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId0' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRUCT =>
                turn0 = readTurn0Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'turn0' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I64 =>
                memberId2 = readMemberId2Value(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRUCT =>
                turn2 = readTurn2Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'turn2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      code,
      isFinished,
      memberId0,
      turn0,
      memberId2,
      turn2,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    code: String = "",
    isFinished: Boolean = false,
    memberId0: Long = 0L,
    turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse,
    memberId2: Long = 0L,
    turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse
  ): PlayCardsResponse =
    new Immutable(
      code,
      isFinished,
      memberId0,
      turn0,
      memberId2,
      turn2
    )

  def unapply(_item: PlayCardsResponse): _root_.scala.Option[scala.Product6[String, Boolean, Long, com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse, Long, com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse]] = _root_.scala.Some(_item)


  @inline private def readCodeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeCodeField(code_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CodeField)
    writeCodeValue(code_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCodeValue(code_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(code_item)
  }

  @inline private def readIsFinishedValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeIsFinishedField(isFinished_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IsFinishedField)
    writeIsFinishedValue(isFinished_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIsFinishedValue(isFinished_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(isFinished_item)
  }

  @inline private def readMemberId0Value(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeMemberId0Field(memberId0_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MemberId0Field)
    writeMemberId0Value(memberId0_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMemberId0Value(memberId0_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(memberId0_item)
  }

  @inline private def readTurn0Value(_iprot: TProtocol): com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = {
    com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse.decode(_iprot)
  }

  @inline private def writeTurn0Field(turn0_item: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Turn0Field)
    writeTurn0Value(turn0_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTurn0Value(turn0_item: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse, _oprot: TProtocol): Unit = {
    turn0_item.write(_oprot)
  }

  @inline private def readMemberId2Value(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeMemberId2Field(memberId2_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MemberId2Field)
    writeMemberId2Value(memberId2_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMemberId2Value(memberId2_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(memberId2_item)
  }

  @inline private def readTurn2Value(_iprot: TProtocol): com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = {
    com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse.decode(_iprot)
  }

  @inline private def writeTurn2Field(turn2_item: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Turn2Field)
    writeTurn2Value(turn2_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTurn2Value(turn2_item: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse, _oprot: TProtocol): Unit = {
    turn2_item.write(_oprot)
  }


  object Immutable extends ThriftStructCodec3[PlayCardsResponse] {
    override def encode(_item: PlayCardsResponse, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): PlayCardsResponse = PlayCardsResponse.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[PlayCardsResponse] = PlayCardsResponse.metaData
  }

  /**
   * The default read-only implementation of PlayCardsResponse.  You typically should not need to
   * directly reference this class; instead, use the PlayCardsResponse.apply method to construct
   * new instances.
   */
  class Immutable(
      val code: String,
      val isFinished: Boolean,
      val memberId0: Long,
      val turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse,
      val memberId2: Long,
      val turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends PlayCardsResponse {
    def this(
      code: String = "",
      isFinished: Boolean = false,
      memberId0: Long = 0L,
      turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse,
      memberId2: Long = 0L,
      turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse
    ) = this(
      code,
      isFinished,
      memberId0,
      turn0,
      memberId2,
      turn2,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      codeOffset: Int,
      val isFinished: Boolean,
      val memberId0: Long,
      val turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse,
      val memberId2: Long,
      val turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends PlayCardsResponse {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val code: String =
      if (codeOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, codeOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the PlayCardsResponse trait with additional state or
   * behavior and implement the read-only methods from PlayCardsResponse using an underlying
   * instance.
   */
  trait Proxy extends PlayCardsResponse {
    protected def _underlying_PlayCardsResponse: PlayCardsResponse
    override def code: String = _underlying_PlayCardsResponse.code
    override def isFinished: Boolean = _underlying_PlayCardsResponse.isFinished
    override def memberId0: Long = _underlying_PlayCardsResponse.memberId0
    override def turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = _underlying_PlayCardsResponse.turn0
    override def memberId2: Long = _underlying_PlayCardsResponse.memberId2
    override def turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = _underlying_PlayCardsResponse.turn2
    override def _passthroughFields = _underlying_PlayCardsResponse._passthroughFields
  }
}

trait PlayCardsResponse
  extends ThriftStruct
  with scala.Product6[String, Boolean, Long, com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse, Long, com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse]
  with java.io.Serializable
{
  import PlayCardsResponse._

  def code: String
  def isFinished: Boolean
  def memberId0: Long
  def turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse
  def memberId2: Long
  def turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = code
  def _2 = isFinished
  def _3 = memberId0
  def _4 = turn0
  def _5 = memberId2
  def _6 = turn2


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (code ne null) {
                writeCodeValue(code, _oprot)
                _root_.scala.Some(PlayCardsResponse.CodeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeIsFinishedValue(isFinished, _oprot)
                _root_.scala.Some(PlayCardsResponse.IsFinishedField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeMemberId0Value(memberId0, _oprot)
                _root_.scala.Some(PlayCardsResponse.MemberId0Field)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (turn0 ne null) {
                writeTurn0Value(turn0, _oprot)
                _root_.scala.Some(PlayCardsResponse.Turn0Field)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeMemberId2Value(memberId2, _oprot)
                _root_.scala.Some(PlayCardsResponse.MemberId2Field)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (turn2 ne null) {
                writeTurn2Value(turn2, _oprot)
                _root_.scala.Some(PlayCardsResponse.Turn2Field)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): PlayCardsResponse = {
    var code: String = this.code
    var isFinished: Boolean = this.isFinished
    var memberId0: Long = this.memberId0
    var turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = this.turn0
    var memberId2: Long = this.memberId2
    var turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = this.turn2
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        code = readCodeValue(_blob.read)
      case 2 =>
        isFinished = readIsFinishedValue(_blob.read)
      case 3 =>
        memberId0 = readMemberId0Value(_blob.read)
      case 4 =>
        turn0 = readTurn0Value(_blob.read)
      case 5 =>
        memberId2 = readMemberId2Value(_blob.read)
      case 6 =>
        turn2 = readTurn2Value(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      code,
      isFinished,
      memberId0,
      turn0,
      memberId2,
      turn2,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): PlayCardsResponse = {
    var code: String = this.code
    var isFinished: Boolean = this.isFinished
    var memberId0: Long = this.memberId0
    var turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = this.turn0
    var memberId2: Long = this.memberId2
    var turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = this.turn2

    _fieldId match {
      case 1 =>
        code = ""
      case 2 =>
        isFinished = false
      case 3 =>
        memberId0 = 0L
      case 4 =>
        turn0 = null
      case 5 =>
        memberId2 = 0L
      case 6 =>
        turn2 = null
      case _ =>
    }
    new Immutable(
      code,
      isFinished,
      memberId0,
      turn0,
      memberId2,
      turn2,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetCode: PlayCardsResponse = unsetField(1)

  def unsetIsFinished: PlayCardsResponse = unsetField(2)

  def unsetMemberId0: PlayCardsResponse = unsetField(3)

  def unsetTurn0: PlayCardsResponse = unsetField(4)

  def unsetMemberId2: PlayCardsResponse = unsetField(5)

  def unsetTurn2: PlayCardsResponse = unsetField(6)


  override def write(_oprot: TProtocol): Unit = {
    PlayCardsResponse.validate(this)
    _oprot.writeStructBegin(Struct)
    if (code ne null) writeCodeField(code, _oprot)
    writeIsFinishedField(isFinished, _oprot)
    writeMemberId0Field(memberId0, _oprot)
    if (turn0 ne null) writeTurn0Field(turn0, _oprot)
    writeMemberId2Field(memberId2, _oprot)
    if (turn2 ne null) writeTurn2Field(turn2, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    code: String = this.code,
    isFinished: Boolean = this.isFinished,
    memberId0: Long = this.memberId0,
    turn0: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = this.turn0,
    memberId2: Long = this.memberId2,
    turn2: com.jxjxgo.gamecenter.rpc.domain.GameTurnResponse = this.turn2,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): PlayCardsResponse =
    new Immutable(
      code,
      isFinished,
      memberId0,
      turn0,
      memberId2,
      turn2,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[PlayCardsResponse]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[PlayCardsResponse]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => this.code
    case 1 => this.isFinished
    case 2 => this.memberId0
    case 3 => this.turn0
    case 4 => this.memberId2
    case 5 => this.turn2
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "PlayCardsResponse"
}
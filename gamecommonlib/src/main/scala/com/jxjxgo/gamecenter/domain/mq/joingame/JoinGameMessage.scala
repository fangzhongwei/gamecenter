// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.jxjxgo.gamecenter.domain.mq.joingame

@SerialVersionUID(0L)
final case class JoinGameMessage(
    traceId: String = "",
    socketId: Long = 0L,
    ip: Long = 0L,
    deviceType: Int = 0,
    fingerPrint: String = "",
    memberId: Long = 0L,
    gameType: Int = 0,
    baseAmount: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[JoinGameMessage] with com.trueaccord.lenses.Updatable[JoinGameMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (traceId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, traceId) }
      if (socketId != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, socketId) }
      if (ip != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, ip) }
      if (deviceType != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, deviceType) }
      if (fingerPrint != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, fingerPrint) }
      if (memberId != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, memberId) }
      if (gameType != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, gameType) }
      if (baseAmount != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, baseAmount) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = traceId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = socketId
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = ip
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = deviceType
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      {
        val __v = fingerPrint
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = memberId
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      {
        val __v = gameType
        if (__v != 0) {
          _output__.writeInt32(7, __v)
        }
      };
      {
        val __v = baseAmount
        if (__v != 0) {
          _output__.writeInt32(8, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage = {
      var __traceId = this.traceId
      var __socketId = this.socketId
      var __ip = this.ip
      var __deviceType = this.deviceType
      var __fingerPrint = this.fingerPrint
      var __memberId = this.memberId
      var __gameType = this.gameType
      var __baseAmount = this.baseAmount
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __traceId = _input__.readString()
          case 16 =>
            __socketId = _input__.readInt64()
          case 24 =>
            __ip = _input__.readInt64()
          case 32 =>
            __deviceType = _input__.readInt32()
          case 42 =>
            __fingerPrint = _input__.readString()
          case 48 =>
            __memberId = _input__.readInt64()
          case 56 =>
            __gameType = _input__.readInt32()
          case 64 =>
            __baseAmount = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage(
          traceId = __traceId,
          socketId = __socketId,
          ip = __ip,
          deviceType = __deviceType,
          fingerPrint = __fingerPrint,
          memberId = __memberId,
          gameType = __gameType,
          baseAmount = __baseAmount
      )
    }
    def withTraceId(__v: String): JoinGameMessage = copy(traceId = __v)
    def withSocketId(__v: Long): JoinGameMessage = copy(socketId = __v)
    def withIp(__v: Long): JoinGameMessage = copy(ip = __v)
    def withDeviceType(__v: Int): JoinGameMessage = copy(deviceType = __v)
    def withFingerPrint(__v: String): JoinGameMessage = copy(fingerPrint = __v)
    def withMemberId(__v: Long): JoinGameMessage = copy(memberId = __v)
    def withGameType(__v: Int): JoinGameMessage = copy(gameType = __v)
    def withBaseAmount(__v: Int): JoinGameMessage = copy(baseAmount = __v)
    def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = traceId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = socketId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = ip
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = deviceType
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = fingerPrint
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = memberId
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = gameType
          if (__t != 0) __t else null
        }
        case 8 => {
          val __t = baseAmount
          if (__t != 0) __t else null
        }
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage
}

object JoinGameMessage extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(5), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(6), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(7), 0).asInstanceOf[Int]
    )
  }
  def descriptor: _root_.com.google.protobuf.Descriptors.Descriptor = JoingameProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage(
  )
  implicit class JoinGameMessageLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.jxjxgo.gamecenter.domain.mq.joingame.JoinGameMessage](_l) {
    def traceId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.traceId)((c_, f_) => c_.copy(traceId = f_))
    def socketId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.socketId)((c_, f_) => c_.copy(socketId = f_))
    def ip: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.ip)((c_, f_) => c_.copy(ip = f_))
    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def fingerPrint: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.fingerPrint)((c_, f_) => c_.copy(fingerPrint = f_))
    def memberId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.memberId)((c_, f_) => c_.copy(memberId = f_))
    def gameType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.gameType)((c_, f_) => c_.copy(gameType = f_))
    def baseAmount: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.baseAmount)((c_, f_) => c_.copy(baseAmount = f_))
  }
  final val TRACEID_FIELD_NUMBER = 1
  final val SOCKETID_FIELD_NUMBER = 2
  final val IP_FIELD_NUMBER = 3
  final val DEVICETYPE_FIELD_NUMBER = 4
  final val FINGERPRINT_FIELD_NUMBER = 5
  final val MEMBERID_FIELD_NUMBER = 6
  final val GAMETYPE_FIELD_NUMBER = 7
  final val BASEAMOUNT_FIELD_NUMBER = 8
}
